// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@protocol INTCCoreBluetoothDataSyncDelegate;
@class WearableDevice;


/// BasisCoreBluetoothManager is a test class to show what is possible
SWIFT_CLASS("_TtC18BasisCoreBluetooth20CoreBluetoothManager")
@interface CoreBluetoothManager : NSObject

/// Returns a shared instance of CoreBluetoothManager
+ (CoreBluetoothManager * _Nonnull)sharedInstance;

/// A registers the delegate with the Core Bluetooth Manager
///
/// \param delegate An object that conforms to INTCCoreBluetoothDataSyncDelegate
- (void)registerForDataSyncUpdates:(id <INTCCoreBluetoothDataSyncDelegate> _Nonnull)delegate;

/// Finds devices that are already connected to the OS.
///
/// \returns  An array of INTCWerableDevices.
- (NSArray<WearableDevice *> * _Nonnull)findExistingDevices;

/// Begins the process for setting up a new device. It is possible to define which device to connect to if a delegate is set. If a delegate is not set the closest device will be chosen.
- (void)beginDeviceSetup;
- (void)stopDeviceSetup;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class INTCWearableData;
@class NSError;

SWIFT_PROTOCOL("_TtP18BasisCoreBluetooth33INTCCoreBluetoothDataSyncDelegate_")
@protocol INTCCoreBluetoothDataSyncDelegate
- (void)coreBluetoothSyncManagerDidBeginSync;
- (void)coreBluetoothSyncManagerDidSyncData:(CoreBluetoothManager * _Nonnull)syncManager data:(INTCWearableData * _Nonnull)data;
- (void)coreBluetoothSyncManagerDidEncounterSyncError:(CoreBluetoothManager * _Nonnull)syncManager error:(NSError * _Nonnull)error;
@optional
- (void)coreBluetoothDidReceiveProgress:(float)progress;
@end



/// INTCCoreBluetoothDataSyncManagerDelegate protocol relays messages from any object to the coreBluetoothManager to force syncing of data between the wearable device and the phone. In addition it also notifies the coreBluetoothManager that it can delete cached data if it so chooses.
SWIFT_PROTOCOL("_TtP18BasisCoreBluetooth40INTCCoreBluetoothDataSyncManagerDelegate_")
@protocol INTCCoreBluetoothDataSyncManagerDelegate
@optional

/// A mechanism for starting a sync. If a sync is already in progress then it does nothing. There is no call back to notify if a sync is already in progress.
- (void)coreBluetoothManagerBeginSync;

/// Allows the delegate method the ability to notify the connectivity system that processing has been completed and it's ok to clean up it's stored internal data. Passing nil to this method or an object with a nil dataID will result in an early return. If this method is not called data will be stored on the device forever.
///
/// \param data A Data object with a non-nil dataID. This should not be nil also.
- (void)coreBluetoothManagerProceedWithDataCleanUp:(INTCWearableData * _Nonnull)data;
@end

@class NSData;


/// An Object abstraction for the data received from an Intel wearable device.
SWIFT_CLASS("_TtC18BasisCoreBluetooth16INTCWearableData")
@interface INTCWearableData : NSObject

/// A unique Identifier
@property (nonatomic, copy) NSString * _Nullable dataID;

/// The path of the data file
@property (nonatomic, copy) NSString * _Nullable filePath;

/// The raw data.
@property (nonatomic, strong) NSData * _Nullable data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;


/// An abstraction for describing the device characteristics that are relevant to the outside world. This is intentionally thin until we get a better understanding of what the consumers of this object would need.
SWIFT_CLASS("_TtC18BasisCoreBluetooth14WearableDevice")
@interface WearableDevice : NSObject

/// A UIColor representing the wearable devices color
@property (nonatomic, strong) UIColor * _Nullable deviceColor;

/// A string depicting the vendor. Most likely this will be a raw name of the vendor
@property (nonatomic, copy) NSString * _Nullable deviceVendor;

/// A String representing the type of device we are attempting to connect to i.e. Sabre, Peak, etc..
@property (nonatomic, copy) NSString * _Nullable deviceType;

/// The SN for the device.
@property (nonatomic, copy) NSString * _Nullable deviceIdentifier;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
